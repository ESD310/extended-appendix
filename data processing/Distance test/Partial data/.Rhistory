require(ggformula)
library(mosaic)
gf_point(TOF ~ Distance, data=distancetest)
distancetest = read.csv("distance_data.csv",header = TRUE)
gf_point(TOF ~ Distance, data=distancetest)
gf_point(TOF ~ Distance, data=distancetest)
gf_point(TOF ~ Distance, data=distancetest)
boksplot(distancetest$TOF[distancetest$Distance==distance])
boxplot(distancetest$TOF[distancetest$Distance==distance])
boxplot(distancetest$TOF[distancetest$Distance==distance])
boxplot(distancetest$TOF[distancetest$Distance==30])
distances = unique(distancetest$Distance)
print(distnaces)
distances = unique(distancetest$Distance)
print(distances)
distances = unique(distancetest$Distance)
print(sort(distances))
gf_point(TOF ~ Distance, data=distancetest) %>%
gf_lm()
for (distance in distances){
values_read = distancetest$TOF[distancetest$Distance==distance]; ##Læser alle værdier ved en afstand
distancetest$TOF[distancetest$Distance==distance] = filter_outliers(values_read); ##Sætter alle værdier til den afstand som det. Det lidt magi men det virker :/.
}
filter_outliers <- function(data){
qnt <- quantile(data, probs=c(.25, .75), na.rm = T)
iqr <- IQR(data)
lower <- qnt[1] - 15*iqr
upper <- qnt[2] + 15*iqr
data <- data[data > lower & data < upper]
return(data)
}
distances = unique(distancetest$Distance)
print(sort(distances))
for (distance in distances){
values_read = distancetest$TOF[distancetest$Distance==distance]; ##Læser alle værdier ved en afstand
distancetest$TOF[distancetest$Distance==distance] = filter_outliers(values_read); ##Sætter alle værdier til den afstand som det. Det lidt magi men det virker :/.
}
for (distance in distances){
values_read = distancetest$TOF[distancetest$Distance==distance]; ##Læser alle værdier ved en afstand
distancetest$TOF[distancetest$Distance==distance] = filter_outliers(values_read); ##Sætter alle værdier til den afstand som det. Det lidt magi men det virker :/.
}
for (distance in distances){
values_read = distancetest$TOF[distancetest$Distance==distance]; ##Læser alle værdier ved en afstand
distancetest$TOF[distancetest$Distance==distance] = filter_outliers(values_read); ##Sætter alle værdier til den afstand som det. Det lidt magi men det virker :/.
}
gf_point(TOF ~ Distance, data=distancetest) %>%
gf_lm()
Det laver vi lige en model på
model1 <- lm(TOF~Distance, data=distancetest)
summary(model1)
View(model1)
V_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
V_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
summary(model1)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
summary(model1)
gf_point(model1)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
summary(model1)
plotModel(model1)
model1 <- lm(TOF~Distance, data=distancetest)
summary(model1)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
summary(model1)
plotModel(model1)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
gf_lm(model1)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
gf_point(TOF ~ Distance, data=distancetest) %>%
gf_lm(model1)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
gf_point(TOF~Distance, data=distancetest) %>%
gf_lm(model1)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
gf_point(TOF ~ Distance, data=distancetest) %>%
gf_lm()
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
gf_point(TOF ~ Distance, data=distancetest) %>%
gf_lm(model1)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
gf_point(TOF ~ Distance, data=distancetest) %>%
plotModel(model1)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
gf_point(TOF ~ Distance, data=distancetest)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
gf_point(TOF ~ Distance, data=distancetest)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
gf_point(TOF ~ Distance+ offset(v_sound * Distance), data=distancetest)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
gf_point(TOF ~ Distance+offset(v_sound * Distance), data=distancetest)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
gf_point(TOF ~ Distance+offset(v_sound * Distance), data=distancetest)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
summary(model1)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
summary(model1)
require(ggformula)
library(mosaic)
for (distance in distances){
values_read = distancetest$TOF[distancetest$Distance==distance]; ##Læser alle værdier ved en afstand
distancetest$TOF[distancetest$Distance==distance] = filter_outliers(values_read); ##Sætter alle værdier til den afstand som det. Det lidt magi men det virker :/.
}
load("C:/Users/axelo/OneDrive - Aalborg Universitet/General - ESD310/P3 Projekt/Distance test/Partial data/.RData")
breaks <- qnorm((0:5)/5, m, s)
load("C:/Users/axelo/OneDrive - Aalborg Universitet/General - ESD310/P3 Projekt/Distance test/Partial data/.RData")
require(ggformula)
library(mosaic)
distancetest = read.csv("distance_data.csv",header = TRUE)
gf_point(TOF ~ Distance, data=distancetest)
boxplot(distancetest$TOF[distancetest$Distance==30])
filter_outliers <- function(data){
qnt <- quantile(data, probs=c(.25, .75), na.rm = T)
iqr <- IQR(data)
lower <- qnt[1] - 15*iqr
upper <- qnt[2] + 15*iqr
data <- data[data > lower & data < upper]
return(data)
}
distances = unique(distancetest$Distance)
print(sort(distances))
for (distance in distances){
values_read = distancetest$TOF[distancetest$Distance==distance]; ##Læser alle værdier ved en afstand
distancetest$TOF[distancetest$Distance==distance] = filter_outliers(values_read); ##Sætter alle værdier til den afstand som det. Det lidt magi men det virker :/.
}
gf_point(TOF ~ Distance, data=distancetest) %>%
gf_lm()
model1 <- lm(TOF~Distance, data=distancetest)
summary(model1)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
summary(model1)
```{r, results='hide', message=FALSE, warning=FALSE}
```{r, warning=FALSE}
gf_point(TOF~Distance+ offset(v_sound * Distance), data=distancetest) %>%
gf_lm()
gf_point(TOF~Distance+ offset(v_sound * Distance), data=distancetest) %>%
gf_lm()
gf_point(TOF~Distance+ offset(v_sound * Distance), data=distancetest) %>%
gf_lm()
gf_point(TOF ~ Distance, data=distancetest) %>%
gf_lm()
gf_point(TOF~Distance+ offset(v_sound * Distance), data=distancetest) %>%
gf_lm()
gf_point(TOF~Distance+ offset(v_sound * Distance), data=distancetest) %>%
gf_lm()
gf_point(TOF~Distance+ offset(v_sound * Distance), data=distancetest) %>%
gf_lm()
gf_point( TOF ~ Distance, data=distancetest) %>%
gf_lm()
gf_point( TOF ~ Distance + offset(v_sound * Distance), data=distancetest) %>%
gf_lm()
gf_point( TOF ~ nyDistance, data=distancetest) %>%
gf_lm()
nyDistance <= Distance + offset(v_sound * Distance)
gf_point( TOF ~ nyDistance, data=distancetest) %>%
gf_lm()
nyDistance <= Distance + offset(v_sound * Distance)
nyDistance = Distance + offset(v_sound * Distance)
nyDistance <-Distance + offset(v_sound * Distance)
nyDistance <- Distance + offset(v_sound * Distance), data = distancetest
nyDistance <- Distance + offset(v_sound * Distance) data = distancetest
gf_point(model1)
gf_point(TOF ~ Distance, data = distancetest) %>%
gf_lm()
gf_point(TOF ~ Distance, data = distancetest) %>%
gf_lm(model = model1)
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
summary(model1)
gf_point(TOF ~ Distance, data = distancetest) %>%
gf_lm(model = model1)
require(ggformula)
library(mosaic)
histogram(model1$residuals)
histogram(model1$residuals, bins=40)
histogram(model1$residuals, bin=40)
histogram(model1$residuals, breaks=40)
histogram(model1$residuals, breaks=40)
favstats(model1$residuals)
histogram(model1$residuals, breaks=40, xlab="Residuals")
favstats(model1$residuals)
histogram(model1$residuals, breaks=70, xlab="Residuals")
favstats(model1$residuals)
histogram(model1$residuals, breaks=70, xlab="Residuals")
favstats(model1$residuals)
histogram(model1$residuals, breaks=70, xlab="Residuals")
