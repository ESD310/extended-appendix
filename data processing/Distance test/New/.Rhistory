require(ggformula)
library(mosaic)
distancetest = read.csv("distance_data.csv",header = TRUE)
gf_point(TOF ~ Distance, data=distancetest)
boxplot(distancetest$TOF[distancetest$Distance==30])
boxplot(distancetest$TOF[distancetest$Distance==50])
require(ggformula)
library(mosaic)
distancetest = read.csv("distance_data.csv",header = TRUE)
gf_point(TOF ~ Distance, data=distancetest)
boxplot(distancetest$TOF[distancetest$Distance==50])
filter_outliers <- function(data){
qnt <- quantile(data, probs=c(.25, .75), na.rm = T)
iqr <- IQR(data)
lower <- qnt[1] - 15*iqr
upper <- qnt[2] + 15*iqr
data <- data[data > lower & data < upper]
return(data)
}
distances = unique(distancetest$Distance)
print(sort(distances))
for (distance in distances){
values_read = distancetest$TOF[distancetest$Distance==distance]; ##Læser alle værdier ved en afstand
distancetest$TOF[distancetest$Distance==distance] = filter_outliers(values_read); ##Sætter alle værdier til den afstand som det. Det lidt magi men det virker :/.
}
gf_point(TOF ~ Distance, data=distancetest) %>%
gf_lm()
model1 <- lm(TOF~Distance, data=distancetest)
summary(model1)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
summary(model1)
boxplot(distancetest$TOF[distancetest$Distance==400])
require(ggformula)
library(mosaic)
boxplot(distancetest$TOF[distancetest$Distance==100])
mean(distancetest$Distance==400)
distancetest = read.csv("distance_data.csv",header = TRUE)
mean(distancetest$Distance==400)
mean(distancetest$Distance==400)
View(distancetest)
variance(distancetest$Distance==400)
sd(distancetest$Distance==400)
require(ggformula)
library(mosaic)
distancetest = read.csv("distance_data.csv",header = TRUE)
gf_point(TOF ~ Distance, data=distancetest)
boxplot(distancetest$TOF[distancetest$Distance==400])
filter_outliers <- function(data){
qnt <- quantile(data, probs=c(.25, .75), na.rm = T)
iqr <- IQR(data)
lower <- qnt[1] - 15*iqr
upper <- qnt[2] + 15*iqr
data <- data[data > lower & data < upper]
return(data)
}
distances = unique(distancetest$Distance)
print(sort(distances))
for (distance in distances){
values_read = distancetest$TOF[distancetest$Distance==distance]; ##Læser alle værdier ved en afstand
distancetest$TOF[distancetest$Distance==distance] = filter_outliers(values_read); ##Sætter alle værdier til den afstand som det. Det lidt magi men det virker :/.
}
gf_point(TOF ~ Distance, data=distancetest) %>%
gf_lm()
model1 <- lm(TOF~Distance, data=distancetest)
summary(model1)
v_sound = 0.01/343 * 10^6; ## Så det er så langt lyden tager om at nå 1 cm og så konverteret til us.
model1 <- lm(TOF~Distance+ offset(v_sound * Distance), data=distancetest)
summary(model1)
gf_point(TOF ~ Distance, data=distancetest) %>%
gf_lm()
gf_point(TOF ~ Distance, data=distancetest) %>%
gf_lm()
?offset
